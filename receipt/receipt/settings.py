"""
Django settings for receipt project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta
from google.cloud import storage

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("USE_DEBUG") == "TRUE"

# SECURITY WARNING: don't run with debug turned on in production!
DONT_READ_RECEIPT = os.getenv("READ_RECEIPT") == "TRUE"

CONN_MAX_AGE = 60

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "authN",
    "corsheaders",
    "thumbnails",
    "storages",
    "rest_framework",
    "uploader",
    "buckets",
    "userSettings",
    "vendor",
    "premium",
    'django_cleanup.apps.CleanupConfig',
    'axes',
    'django_otp',
    'django_otp.plugins.otp_totp',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'django_otp.middleware.OTPMiddleware',
    'axes.middleware.AxesMiddleware',
]

ROOT_URLCONF = "receipt.urls"

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:3080",
    "http://localhost:3443",
    "https://ui.ribbonreceipts.com",
    "http://ui.ribbonreceipts.com",
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesStandaloneBackend',
    'django.contrib.auth.backends.ModelBackend',
]

USE_DB = os.getenv("USE_DB") == "TRUE"
IS_DOCKER = os.getenv("RUNNING_DOCKER") == "TRUE"

DATABASE_PASS = os.getenv("DB_PASS")
USE_CLOUD_SQL = os.getenv("USE_CLOUD_SQL") == "TRUE"
USE_API = os.getenv("USE_API") == "TRUE"

if IS_DOCKER:
    DATABASE_PASS = Path(os.getenv("DB_PASS_FILE")).read_text()

if USE_DB:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'receipts',
            'USER': 'postgres',
            'PASSWORD': DATABASE_PASS,
            'CONN_MAX_AGE': 60,
            'HOST': 'receiptsdb.c2ob1ikuivcu.us-east-1.rds.amazonaws.com',
            'PORT': '5432',
        }
    }
elif USE_CLOUD_SQL:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DATABASE_NAME'),
            'USER': os.getenv('DATABASE_USER'),
            'PASSWORD': os.getenv('DATABASE_PASSWORD'),
            'CONN_MAX_AGE': 60,
            'HOST': '127.0.0.1',
            'PORT': '5432',
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }


WSGI_APPLICATION = "receipt.wsgi.application"

PARSE_URL = "https://parse.ribbonreceipts.com/parse" if USE_API else "http://ribbonparser.default.svc.cluster.local:8090/parse"
EMAIL_URL = "http://localhost:8081/graphql" if USE_API else "http://ribbonnotif.default.svc.cluster.local:8081/graphql"
# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    }
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True
APPEND_SLASH = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
}

USE_S3 = os.getenv("USE_S3") == "TRUE"
USE_GS = os.getenv("USE_GS") == "TRUE"

STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
MEDIA_URL = "/receipts/"
MEDIA_ROOT = os.path.join(BASE_DIR, "receipts")

if USE_S3:
    # aws settings

    if not IS_DOCKER:
        AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
        AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    else:
        AWS_ACCESS_KEY_ID = Path(
            os.getenv("AWS_ACCESS_KEY_ID_FILE")).read_text()
        AWS_SECRET_ACCESS_KEY = Path(
            os.getenv("AWS_SECRET_ACCESS_KEY_FILE")).read_text()

    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
    AWS_DEFAULT_ACL = "public-read"
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_S3_REGION_NAME = 'us-east-1'
    # s3 static settings
    AWS_LOCATION = "static"
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
elif USE_GS:
    GS_QUERYSTRING_AUTH = False
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    GS_BUCKET_NAME = 'ribbon-receipts-bucket'
    GCS_ROOT = "https://storage.googleapis.com/{bucket_name}/".format(
        bucket_name=GS_BUCKET_NAME
    )
    STATIC_URL = '/static/'
    STATIC_ROOT = 'https://storage.googleapis.com/{}/static/'.format(
        GS_BUCKET_NAME)
    MEDIA_URL = 'https://storage.googleapis.com/{}/'.format(GS_BUCKET_NAME)
    MEDIA_ROOT = 'https://storage.googleapis.com/{}/'.format(GS_BUCKET_NAME)
    CLIENT = storage.Client.from_service_account_json(
        os.getenv('GOOGLE_APPLICATION_CREDENTIALS'))
    BUCKET = CLIENT.bucket('ribbon-receipts-bucket')
else:
    STATIC_URL = "/staticfiles/"
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
